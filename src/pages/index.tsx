import { Canvas } from "@react-three/fiber";
import Head from "next/head";
import { useRef, useState } from "react";
import { Html, RoundedBox } from "@react-three/drei";
import { PerspectiveCamera } from "@react-three/drei";
import gsap from "gsap";
import type * as THREE from "three";

export default function Home() {
  function Cube({
    position,
    color,
    size,
  }: {
    position: [number, number, number];
    color: string;
    size: [number, number, number];
  }) {
    const quizData = [
      {
        question: "What is the capital of France?",
        answer: "Paris",
      },
      {
        question: "Who wrote 'To Kill a Mockingbird'?",
        answer: "Harper Lee",
      },
      {
        question: "What is the chemical symbol for gold?",
        answer: "Au",
      },
      {
        question: "What is the largest planet in our solar system?",
        answer: "Jupiter",
      },
      {
        question: "Who developed the theory of relativity?",
        answer: "Albert Einstein",
      },
    ];
    const [currentQuestion, setCurrentQuestion] = useState(0);
    const boxRef = useRef<THREE.Group>(null);
    const [isFlipped, setIsFlipped] = useState(false);
    const handleClick = () => {
      const y = !isFlipped ? Math.PI * (190 / 190) : 0;
      if (boxRef.current === null) return;
      gsap.to(boxRef.current.rotation, {
        y: y,
        duration: 1,
      });
      setIsFlipped(!isFlipped);
    };

    return (
      <group ref={boxRef}>
        <mesh position={position}>
          <RoundedBox
            args={size} // Width, Height, Depth
            radius={0.1} // Corner radius
            smoothness={4} // Smoother corners
          >
            <meshStandardMaterial color={"white"} />
          </RoundedBox>
          <meshStandardMaterial color={color} />
        </mesh>
        <Html
          scale={0.1}
          transform
          occlude
          position={[0, 0, 0.51]}
          rotation={[0, 0, 0]}
          center
          style={{ width: "1100px", height: "700px" }}
        >
          <div className="grid h-full w-full columns-3 rounded bg-white p-2 shadow-lg">
            <span className="col-span-3 row-start-1 h-full items-center justify-center text-center text-black">
              {quizData[currentQuestion]?.question}
            </span>
            <button
              onClick={() =>
                currentQuestion > 0
                  ? setCurrentQuestion(currentQuestion - 1)
                  : setCurrentQuestion(quizData.length - 1)
              } // Decrement the current question
              className="row-start-2 mt-2 h-1/3 rounded bg-blue-500 px-3 py-1 text-white"
            >
              Previous
            </button>
            <button
              onClick={handleClick}
              className="row-start-2 mt-2 h-1/3 rounded bg-blue-500 px-3 py-1 text-white"
            >
              Show solution
            </button>
            <button
              onClick={() =>
                currentQuestion < quizData.length - 1
                  ? setCurrentQuestion(currentQuestion + 1)
                  : setCurrentQuestion(0)
              } // Increment the current question
              className="row-start-2 mt-2 h-1/3 rounded bg-blue-500 px-3 py-1 text-white"
            >
              Next
            </button>
          </div>
        </Html>
        <Html
          transform
          occlude
          position={[0, 0, -0.51]}
          rotation={[0, Math.PI, 0]}
          center
        >
          <div className="rounded bg-white p-2 shadow-lg">
            <p className="text-black">{quizData[currentQuestion]?.answer}</p>
            <button
              onClick={handleClick}
              className="mt-2 rounded bg-blue-500 px-3 py-1 text-white"
            >
              Click Me
            </button>
          </div>
        </Html>
      </group>
    );
  }
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div
          className="canvas-container"
          style={{ width: "100%", height: "100vh" }}
        >
          <Canvas camera={{ position: [0, 0, 4] }}>
            <ambientLight intensity={2} />
            <PerspectiveCamera makeDefault position={[0, 0, 5]} />

            <Cube position={[0, 0, 0]} color="red" size={[3, 2, 1]} />
          </Canvas>
        </div>
      </main>
    </>
  );
}
